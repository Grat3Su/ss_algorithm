package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.PriorityQueue;
/* 데이터 셋
18
1
-1
0
0
0
1
1
-1
-1
2
-2
0
0
0
0
0
0
0
 */
public class BOJ_11286_heap {

	static int N;
	static PriorityQueue<Integer> pqueue = new PriorityQueue<>(
			(n1,n2) -> Math.abs(n1)==Math.abs(n2)?n1-n2:Math.abs(n1)-Math.abs(n2));
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		//N개의 연산 처리
				for(int i = 0; i<N; i++) {
					int num = Integer.parseInt(br.readLine());
					if(num == 0) {
						check();
					}
					else {
						array[to++] = num;
					}
				}
			}
			static void check() {
				//대상이 없을 때 0 <= 최초, 다 꺼냈을 때
				if(from == to) {
					System.out.println(0);
					return;
				}
				
				//최솟값(최솟값의 인덱스)
				int minNum = Integer.MAX_VALUE;
				int minIdx = from;//시작
				
				for(int i = from; i<to; i++) {
					//array[i]를 따져본다
					if(Math.abs(minNum)==Math.abs(array[i])) {;//절댓값이 같은 경우
						if(array[i]<minNum) {
							minNum = array[i];
							minIdx = i;
						}
					}else if(Math.abs(minNum)>Math.abs(array[i])) {
						minNum = array[i];
						minIdx = i;
					}
				}
				System.out.println(minNum);
				//최솟값을 뺀다. < from과 바꿔치기
				array[minIdx] = array[from];
				from++;
			}
		}


}
