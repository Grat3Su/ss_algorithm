package sw.offline0823;

import java.util.*;
import java.io.*;

/* 데이터셋
 * T
 * V정점 E간선
 * 1
3 3
1 2 1
2 3 2
1 3 3
 */
//선택된 정점들로부터 갈 수 있는 최소 비용 간선의 정점 <-우선순위큐
//간선리스트->인접리스트
public class SW_3124_MST3 {
	static int V, E, sum;
	static List<List<Edge>> adjList;
	static boolean[] visit;//방문(선택)
	static PriorityQueue<Edge> pqueue = new PriorityQueue<>((e1,e2)->e1.weight-e2.weight);
	static StringBuilder sb = new StringBuilder();

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());

		for (int t = 0; t < T; t++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			V = Integer.parseInt(st.nextToken());
			E = Integer.parseInt(st.nextToken());

			parents = new int[V + 1];
			edges = new Edge[E];
			for (int i = 0; i < E; i++) {
				st = new StringTokenizer(br.readLine());
				int from = Integer.parseInt(st.nextToken());
				int to = Integer.parseInt(st.nextToken());
				int weight = Integer.parseInt(st.nextToken());

				edges[i] = new Edge(from, to, weight);
			}

			sum = 0;

			Arrays.sort(edges, (e1, e2) -> e1.weight - e2.weight);
			make();
			// 정렬된 간선 리스트에서 비용이 가장 적은 간선을 선택하면서 사이클이 생기지 않도롣 v-1개 선택한다.
			int cnt = 0;// 선택된 간선 수
			for (int i = 0; i < E; i++) {
				Edge edge = edges[i];
				if (union(edge.from, edge.to)) {
					cnt++;
					sum += edge.weight;
				}

				if (cnt == V - 1)
					break;
			}
			sb.append("#").append(t + 1).append(" ").append(sum).append("\n");
		}
		System.out.println(sb);
	}

	static class Edge {
		int v, weight;

		public Edge(int v, int weight) {
			super();
			this.v = v;
			this.weight = weight;
		}
	}
}
