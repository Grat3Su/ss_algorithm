package BOJ.offline_0825;
import java.util.*;
import java.io.*;
/*테스트 케이스
 * N
 * Inning
 * 2
4 0 0 0 0 0 0 0 0
4 0 0 0 0 0 0 0 0
 */
//시뮬 + 순열 : 시간초과 주의
public class BOJ_17281_Baseball {
	static int N, ans;
	static int[][] inning;
	static int[] src = {0,1,2,3,4,5,6,7,8};
	static int[] tgt =new int[9];
	//static boolean[] select = new boolean[9];
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());

		//자료구조 초기화
		inning = new int[N][9];
		for(int i = 0; i<N; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for(int j = 0; j<9; j++) {
				inning[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		//풀이
		perm(0,0);
		System.out.println(ans);
	}
	static void perm(int tgtIdx, int mask) {//index, mask
		//기저조건
		if(tgtIdx == 9) {
			
			game();
			return;
		}
		//모든 0-8에 대해서 이전에 사용하지 않은 것을 제외하고 고려한다.
		for(int i = 1; i<9; i++) {//SRC[0]는 TGT[3](4번자리)에 고정
			if((mask&1<<i)!=0)	continue;
			
			if(tgtIdx == 3) {//고정시킬 자리
				tgt[3]=0;
				perm(tgtIdx+1,mask);
			}else {
				tgt[tgtIdx] = src[i];
				perm(tgtIdx+1, mask|1<<i);
			}
				
			
		}
	}
	static void game() {
		//이닝이 반복 (N만큼)
		//매 이닝별로 타자를 순서로 세워서 안타, 아웃을 주어진 입력대로 계산
		
	}
}
