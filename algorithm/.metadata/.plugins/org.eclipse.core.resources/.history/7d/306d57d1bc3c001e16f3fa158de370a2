package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;
/* 데이터셋 - 정점 갯수 | 간선 갯수 | 탐색을 시작할 번호
4 5 1
1 2
1 3
1 4
2 4
3 4
 */

public class BOJ_1260_DFSBFS {
	
	static int N,M,V;
	static List<List<Integer>> adjList = new ArrayList<>(); 
	static boolean[] check;
	static StringBuilder sb = new StringBuilder();

	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken())+1;
		M = Integer.parseInt(st.nextToken());
		V = Integer.parseInt(st.nextToken());
		check = new boolean[N];
		
		for(int i = 0; i<M; i++) {
			adjList.add(new ArrayList<Integer>());
		}

		for(int i = 0; i<M; i++) {
			st = new StringTokenizer(br.readLine());
			adjList.get(Integer.parseInt(st.nextToken())).add(Integer.parseInt(st.nextToken()));
		}
		
		dfs(V);
		System.out.println(sb);
		sb.setLength(0);
		check = new boolean[N];
		bfs(V);
		System.out.println(sb);
		
	}
	
	static void dfs(int idx) {
		List<Integer>list = adjList.get(idx);
		sb.append(idx).append(" ");
		for(Integer i:list) {
			//visit
			
			if(check[i])continue;
			check[i] = true;
			dfs(i);
		}
	}
	static void bfs(int n) {//
		Queue<Integer> queue = new ArrayDeque<>();
		queue.offer(n);
		check[n] = true;
		while(!queue.isEmpty()) {
			int v = queue.poll();//얘로부터 갈 수 ㅇㅆ는 루트들은 큐에 저장해야함
			List<Integer>list = adjList.get(v);
			sb.append(n).append(" ");
			for(Integer i:list) {
				if(check[i]) continue;
				queue.offer(i);
				check[i] = true;
			}
		}
	}
}
