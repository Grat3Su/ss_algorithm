package BOJ.offline0824;

import java.util.*;
import java.io.*;

//ㅂ부분집합을 통해서 A, B 두 개의 그룹으로 나누고 각각 연결 여부를 bfs, dfs로 확인한 후 최소값 갱신
public class BOJ_17471_Gerrymandering2 {	
	static int N, min;
	static int[][] matrix;
	static boolean[] select;//부분집합 용도
	static boolean[] visit;//bfs 중복 체크
	
	static Queue<Integer>queue = new ArrayDeque<Integer>();
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine())+1;
		population = new int[N];
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		for(int i = 0; i<N; i++) {//인구
			population[i] = Integer.parseInt(st.nextToken());
		}
		
		for(int i = 0; i<N; i++) {//인접 리스트
			adjList.add(new ArrayList<Integer>());
		}
		for (int i = 0; i < N - 1; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			int v = Integer.parseInt(st.nextToken());
			while (!st.hasMoreTokens()) {// 인접 리스트
				adjList.get(v).add(Integer.parseInt(st.nextToken()));
			}
		}
		
		boolean[] visit = new boolean[N];
		

	}
	
	static void subset() {
		
	}

}
