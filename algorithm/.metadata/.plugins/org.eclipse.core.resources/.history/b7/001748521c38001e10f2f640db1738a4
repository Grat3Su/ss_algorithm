package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class BOJ_1566_ChickenDeliver {
/* 조합 문제
 * 데이터셋
 * N M
 * 1 : 집 2 : 치킨
 * M만큼 2를 남겼을 때 최소 치킨거리
 * 치킨거리? 모든 거리의 합
5 3
0 0 1 0 0
0 0 2 0 1
0 1 2 0 0
0 0 1 0 0
0 0 0 0 2
 */
	static int N,M, min,houseSize,srcSize;
	static List<int[]> house, src,tgt;
	static int[][] map;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		map = new int[4][4];
		house = new ArrayList<>();
		src = new ArrayList<>();
		tgt = new ArrayList<>();
		
		for(int i = 0; i<N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j<N; j++) {				
				int n = Integer.parseInt(st.nextToken());
				
				if(n==1) {
					house.add(new int[] {i,j});
				}else if(n==2) {
					src.add(new int[] {i,j});
					
				}
			}
			
			min =Integer.MAX_VALUE;
			houseSize = house.size();
			srcSize = src.size();
			
			//조합
			comb(0,0);
			System.out.println(min);
		}
	}
	
	static void comb(int srcIdx, int tgtIdx) {
		if(tgtIdx ==M) {
			//치킨집 M개를 조합으로 뽑은 상태
			//이 조합의 치킨 거리의 합을 구하고 초솟값 경ㅊ신
			//모든 집 각각에 대해 뽑힌 CHLTHRJFL CLZLSWLQ..
			int sum = 0;
			for(int i = 0; i<houseSize; i++) {
				int dist = Integer.MAX_VALUE;
				int []h = house.get(i);
				for(int j = 0; j<N; j++) {
					int[]c =tgt.get(i);
					dist = Math.abs(h[0]-c[0]);
				}
				sum+=dist;
			}
			return;
		}
		if(srcIdx == srcSize) {
			return;
		}
		
		tgt.add(src.get(srcIdx));
		comb(srcIdx+1, tgtIdx+1);
		tgt.remove(src.get(srcIdx));//선택 되돌리기
		comb(srcIdx+1, tgtIdx);
		
		min = Math.min(min, sum)
	}
}
