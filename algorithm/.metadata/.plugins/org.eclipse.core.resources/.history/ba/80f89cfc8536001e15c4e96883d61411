package sw;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Queue;

public class SW_1861_SquareRoom {
//BFS로 푸는 문제래
//첫 번째 테스트 케이스는 1 또는 3이 적힌 곳에 있어야 한다.
//두 번째 테스트 케이스는 3 또는 6이 적힌 곳에 있어야 한다.
	
	static StringBuilder sb = new StringBuilder();
	static int N, ans, count;
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int T = Integer.parseInt(br.readLine());
		N = Integer.parseInt(br.readLine());
		for(int i = 0; i<T; i++) {
			if(i==0) {
				bfs(1);
				bfs(3);
			}
		}
		
	}
	
	static void bfs(int idx) {
		//최초 시작 노드를 큐에 넣고 시작
		Queue<Integer> queue = new ArrayDeque<>();
		queue.offer(idx);
		
		while(!queue.isEmpty()) {
			//노드를 꺼내고 그 노드로부터 갈수 있는 다른 노드를 큐에 담는다
			int curIdx= queue.poll();
			
			//갈 수 있는 다른 노드<=완전 이진트리(top->bottom)
			//갈 수 있는의 의미는 왼쪽 자식, 오른쪽 자식 노드가 있으면이라는 의미
			int lcIdx = curIdx*2;
			int rcIdx = curIdx*2+1;
			
			count++;
			
		}
		 sb.setLength(sb.length()-2);
	}
}
