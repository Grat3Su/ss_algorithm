package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.StringTokenizer;
/* 데이터셋 - 정점 갯수 | 간선 갯수 | 탐색을 시작할 번호
4 5 1
1 2
1 3
1 4
2 4
3 4
 */

public class BOJ_1260_DFSBFS_list {

	static int N, M, V;
	static boolean[][] matrix;
	static boolean[] visit;
	static Queue<Integer> queue = new ArrayDeque<>();
	static StringBuilder sb = new StringBuilder();

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		V = Integer.parseInt(st.nextToken());

		// 자료구조ㅡ릭스
		matrix = new boolean[N + 1][N + 1];// 1부터 시작
		visit = new boolean[N + 1];

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int n1 = Integer.parseInt(st.nextToken());
			int n2 = Integer.parseInt(st.nextToken());
			matrix[n1][n2] = true;// n1>n2
			matrix[n2][n1] = true;// n2>n1
		}
		// 작은 번호 정점부터 방문 <= 인접 행렬은 for idx 사용 <= 정렬 필요 x
		visit[V] = true;
		dfs(V);
		sb.setCharAt(sb.length() - 1, '\n');

		for (int i = 1; i <= N; i++) {
			visit[i] = false;
		}
	}

	static void dfs(int num) {
		sb.append(num).append(" ");
		
		for(int i = 0; i<N+1; i++) {
			if(!matrix[num][i]||visit[i]) continue;
		visit[i] = true;
			dfs(i);
				
			}
	}

	static void bfs() {
		visit[V] = true;
		
		queue.offer(V);
		
		while(!queue.isEmpty()) {
			int num = queue.poll();
			sb.append(num).append(" ");
		
		for(int i = 0; i<N+1; i++) {
			if(!matrix[num][i]||visit[i])
		visit[i] = true;
			dfs(i);
		}
		}	
	}
