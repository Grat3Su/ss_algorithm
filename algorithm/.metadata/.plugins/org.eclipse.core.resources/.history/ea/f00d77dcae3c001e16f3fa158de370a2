package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.StringTokenizer;
/* 데이터셋 - 정점 갯수 | 간선 갯수 | 탐색을 시작할 번호
4 5 1
1 2
1 3
1 4
2 4
3 4
 */

public class BOJ_1260_DFSBFS {
	
	static int N,M,V;
	static int[][] adjMatrix;
	static boolean[] check;
	static StringBuilder sb = new StringBuilder();

	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken())+1;
		M = Integer.parseInt(st.nextToken());
		V = Integer.parseInt(st.nextToken());
		check = new boolean[N];
		adjMatrix = new int[N][N];
		
		adjMatrix[0][V] = 1;
		for(int i = 0; i<N; i++) {
			st = new StringTokenizer(br.readLine());
			int to = Integer.parseInt(st.nextToken()); 
			int from = Integer.parseInt(st.nextToken());
			
			adjMatrix[to][from] = adjMatrix[from][to] = 1; 
		}
		dfs(0);
		System.out.println(sb);
		//sb.setLength(0);
		bfs(0);
		System.out.println(sb);
		
	}
	
	static void dfs(int idx) {
		//Queue<Integer> queue = new ArrayDeque<>();		
	
		for(int i = 0; i<N; i++) {
			if(!check[i]&&adjMatrix[idx][i] == 1) {
				sb.append(i).append(" ");
				idx = i;
				check[i] = true;
				dfs(idx);
				break;
			}
		}
	}
	static void bfs(int n) {//
		Queue<Integer> queue = new ArrayDeque<>();
		queue.offer(n);
		check[n] = true;
		
		while(!queue.isEmpty()) {
			int v = queue.poll();//얘로부터 갈 수 ㅇㅆ는 루트들은 큐에 저장해야함
			sb.append(v).append(" ");
			
			for(int i = 1; i<5; i++) {
				if(adjMatrix[v][i]!=1||check[i])continue;
				queue.offer(i);
				check[i] = true;
			}			
			}
	}

}
