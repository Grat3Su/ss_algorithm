package BOJ.algostudy;

import java.io.*;
import java.util.*;
/* 데이터셋
 * 7
0110100
0110101
1110101
0000111
0100000
0111110
0111000
 */
public class BOJ_2667_num {
	static int N, cnt,idx;
	static int[][] map;
	static boolean[][] visit;
	static int[] dx = {0,0,1,-1};
	static int[] dy = {1,-1,0,0};
	static StringBuilder sb = new StringBuilder();
	static Queue<int[]>queue = ArrayDeque<Integer>();
    public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));	
        
		N = Integer.parseInt(br.readLine());
		map = new int[N][N];
		
		for(int i = 0; i<N; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for(int j = 0; j<N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		while(!queue.isEmpty()) {
			int[] cur = queue.poll();
			
			for(int i = 0; i<4; i++) {
				int x = cur[0]+dx[i];
				int y = cur[1]+dx[i];
				
				if(x<0||x>N||y<0||y>N) continue;
				if(map[x][y]!=1)continue;//구역이 아니면
				
				map[x][y] = map[cur[0]][cur[1]]+1;
				if(map[x][y]>cnt)cnt = map[x][y];
				
				queue.add(new int(x,y));
				                          
				
			}
		}
				
    }
    static void around(int c) {
    	for(int i = 0; i<N; i++) {
    		for(int j = 0; j<N; j++) {
    			
    		}
    	}
    }
}
