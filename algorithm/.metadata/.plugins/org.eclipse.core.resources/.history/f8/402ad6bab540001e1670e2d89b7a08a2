package sw.offline0822;

import java.util.*;
import java.io.*;

//기본적인 순열
public class SW_1247_OptimalPath_NP {
	static int T, N, comY, comX, homeX, homeY, min;
	static int cust[][], index[];// 회사랑 집좌표 포함해야해서 +2인거 잊지말기
	static boolean select[];

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();

		T = Integer.parseInt(br.readLine());
		for (int t = 0; t < T; t++) {
			N = Integer.parseInt(br.readLine());
			cust = new int[N][2];
			select = new boolean[N];
			tgt = new int[N];
			min = Integer.MAX_VALUE;

			StringTokenizer st = new StringTokenizer(br.readLine());
			comY = Integer.parseInt(st.nextToken());
			comX = Integer.parseInt(st.nextToken());
			homeY = Integer.parseInt(st.nextToken());
			homeX = Integer.parseInt(st.nextToken());
			for (int i = 0; i < N; i++) {// 회사-집-고객'
				cust[i][0] = Integer.parseInt(st.nextToken());
				cust[i][1] = Integer.parseInt(st.nextToken());
			}
			perm(0);
			sb.append("#").append(t + 1).append(" ").append(min).append("\n");

		}
		System.out.println(sb);
	}

	static boolean np(int array[]) {
		//3가지
		//앞에서 교환되어야 하는 인덱스&작업
		int i,j,k;
		i=j=k= N-1;
		while(i>0&&array[i-1]>=array[i]) --i;//큰것이 나타날때까지 감소
		//이미 가장 큰 수 일때
		//desc
		if(i==0) return false;//더 이상 큰 수를 만들 수 없음
		
		//앞쪽에서 바꿀 index 확정 i-1
		
		//뒤에서 교환되어야 하는 인덱스&작업
		while(array[i-1]>=array[j])--j;
		
		swap(array,i-1,j);
		
		//앞뒤 교환 후 뒤쪽 정리(교환)
		while(i<k) {
			swap(array, i++,k--);
		}
		
		//j 확정
		//교환 후 뒤쪽을 작은 수로 정리
		return true;
	}
	
	static int distance(int y1, int x1, int y2, int x2) {
		return Math.abs(y1-y2)+Math.abs(x1-x2);
	}

}
